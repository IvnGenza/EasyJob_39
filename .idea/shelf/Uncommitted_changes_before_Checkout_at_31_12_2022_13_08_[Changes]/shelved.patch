Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nfrom database.authentication import auth,db\r\nimport sys\r\nimport re\r\nfrom PyQt5.uic import loadUi\r\nfrom PyQt5 import QtWidgets\r\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\r\nfrom functools import *\r\nUserType = 'Student' #temporay global variable for testing usersettings class\r\n#------------------------------------Signup class------------------------------------\r\n\r\nclass Signup(QMainWindow):\r\n    def __init__(self):\r\n        super(Signup, self).__init__()\r\n        loadUi(\"ui/signup.ui\", self) # file\r\n        self.handle_buttons() # allows us to listen for clicks on all the buttons\r\n\r\n\r\n    def CreateNewAccFunc(self):\r\n        flag=0\r\n\r\n        email = self.Email_text_box.text()\r\n        PasswordKey=self.password_text_box.text()\r\n        FullName=self.full_name_text_box.text()\r\n        Age=self.age_spin_box.text() #age will always be a valid number, there for we dont need to test it\r\n        UserName=self.username_text_box.text()\r\n        UserType=self.user_type_text_box.currentText() #user type only has 2 options, and by default will be student, no need for tests\r\n        ErrorString = '' #this string will show the error message when clicking signup, if there are no errors, this will stay empty\r\n        \r\n        if self.checkEmail(email)==False:\r\n            ErrorString = ''.join((ErrorString,' Email,'))\r\n            flag = 1\r\n\r\n        if self.checkPasswordKey(PasswordKey)==False:\r\n            ErrorString = ''.join((ErrorString,' Password,'))\r\n            flag = 1\r\n           \r\n        if self.checkFullName(FullName)==False:\r\n            ErrorString = ''.join((ErrorString,' Full Name,'))\r\n            flag = 1\r\n           \r\n        if self.checkUserName(UserName)==False:\r\n            ErrorString = ''.join((ErrorString,' User Name,'))\r\n            flag = 1\r\n            \r\n        # formating the error string acording to the users input\r\n        ErrorString = ''.join(('Invalid ',ErrorString))\r\n        ErrorString = ErrorString[:-1] + '.' #removing the last ',' and adding a '.' instead \r\n\r\n\r\n        # this function shows label with error message.\r\n        def showError(message):\r\n            self.wrong_data_label.setVisible(True)\r\n            self.wrong_data_label.setText(message)\r\n\r\n        if flag == 0:\r\n\r\n            #Putting data base funcs in try/except to prevent app crash on error.\r\n            try:\r\n                auth.create_user_with_email_and_password(email,PasswordKey) # Saving new user account in FireBase auth.\r\n                db.child('Users').push({'username':UserName,'fullname':FullName,'age':Age,'usertype':UserType,'email':email}) #Saving new user data in RealTime db.\r\n                self.change_to_login()\r\n\r\n            except:\r\n                showError(\">> Connection Error! <<\")\r\n\r\n        else:\r\n            showError(ErrorString)\r\n\r\n\r\n#--------------help funcs for signup class-----------------\r\n\r\n\r\n    def checkPasswordKey(self, passkey):\r\n        if passkey == '':\r\n            return False\r\n        elif passkey.islower() or passkey.isalpha():\r\n            return False #returns false if there are no uppercase letters or no numbers\r\n        return True\r\n\r\n    def checkEmail(self, email):  #checks email validation\r\n        regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b' #regular expression\r\n        if(re.fullmatch(regex, email)):\r\n             print(\"Valid Email\")\r\n             return True\r\n        else:\r\n            print(\"Invalid Email\")\r\n            return False\r\n\r\n    def checkFullName(self, fullname):\r\n        if fullname == '':\r\n           return False\r\n        temp = fullname.split(' ')\r\n        if len(temp) > 1: #checks if the name is valid \r\n            if temp[0].isalpha and temp[1].isalpha():\r\n                return True\r\n        else:\r\n            print('Invalid FullName')\r\n            return False\r\n\r\n    def checkUserName(self, username):\r\n        if username == '':\r\n            return False\r\n        if username.isalpha():\r\n            return True \r\n        return False\r\n\r\n\r\n\r\n    def change_to_login(self): # just a test function\r\n        login = Login()\r\n        widget.addWidget(login)\r\n        widget.setCurrentIndex(widget.currentIndex()+1) # -1 also works?\r\n\r\n    def handle_buttons(self): # this function handles the click of the signup button\r\n        self.sign_up_button.clicked.connect(self.CreateNewAccFunc)\r\n        self.existing_account_button.clicked.connect(self.change_to_login)\r\n        #self.wrong_data_label.setVisible(False) #not needed beacause the inner text is already blank, there is no text.\r\n        \r\n\r\n#------------------------------------Login class------------------------------------\r\n \r\n\r\n# This is a Login window object\r\nclass Login(QMainWindow):\r\n    def __init__(self):\r\n        super(Login, self).__init__()\r\n        loadUi(\"ui/login.ui\", self) # file\r\n        self.handle_buttons() # allows us to listen for clicks on the signup button\r\n\r\n    def logging(self):\r\n        email=self.username_lable.text()\r\n        passwordKey=self.password_lable.text()\r\n\r\n        # this function shows label with error message.\r\n        def showError(message):\r\n            self.wrong_data_label_2.setVisible(True)\r\n            self.wrong_data_label_2.setText(message)\r\n\r\n        if self.checkPasswordKey(passwordKey) and self.checkEmail(email):\r\n\r\n            try: #Putting data base funcs in try/except to prevent app crash on error.\r\n                auth.sign_in_with_email_and_password(email,passwordKey)\r\n                print(\">> Welcome! <<\")\r\n                self.change_to_homepage() #goes to next screen\r\n            except: #if could not login then there is a connection error.\r\n                showError(\">> Connection Error! <<\")\r\n\r\n        else: #if there is no existing account then show this error message\r\n            showError(\"Email or password is invalid.\")\r\n    \r\n\r\n     \r\n#--------------help funcs for login class-----------------\r\n\r\n    def checkPasswordKey(self, passkey):\r\n        if passkey == '':\r\n            return False\r\n        elif passkey.islower() or passkey.isalpha():\r\n            return False #returns false if there are no uppercase letters or no numbers\r\n        return True\r\n\r\n    def checkEmail(self, email):\r\n        regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b' #regular expression\r\n        if(re.fullmatch(regex, email)):\r\n             print(\"Valid Email\")\r\n             return True \r\n \r\n        else:\r\n            print(\"Invalid Email\")\r\n            return False\r\n\r\n    def change_to_signup(self): # change to signup screen\r\n        signup = Signup()\r\n        widget.addWidget(signup)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def change_to_homepage(self): #change to homepage screen\r\n        homepage = Homepage()\r\n        widget.addWidget(homepage)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def handle_buttons(self): # this function handles the click of the signup button\r\n        self.sign_up_button.clicked.connect(self.change_to_signup)\r\n        self.wrong_data_label_2.setVisible(False)\r\n        self.login_button.clicked.connect(self.logging)\r\n\r\n\r\n    #------------------------------------Homepage class------------------------------------\r\n\r\nclass Homepage(QMainWindow):\r\n    def __init__(self):\r\n        super(Homepage, self).__init__()\r\n        loadUi(\"ui/homepage.ui\", self) # file\r\n        self.handle_buttons() # allows us to listen for clicks on all the buttons\r\n\r\n\r\n    #def homepage_screen(self):\r\n\r\n\r\n\r\n    #--------------help funcs for homepage class-----------------\r\n    def change_to_login(self): # change to login screen\r\n        login = Login()\r\n        widget.addWidget(login)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def change_to_usersettings(self): # change to signup screen\r\n        usersettings = Usersettings()\r\n        widget.addWidget(usersettings)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    #def change_to_search_results(self): # change to signup screen\r\n    #    search = Search_results()\r\n    #    widget.addWidget(search)\r\n    #    widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def handle_buttons(self): # this function handles the click of the signup button\r\n        self.sign_out_button.clicked.connect(self.change_to_login) #for sign out button input\r\n        self.user_settings_button.clicked.connect(self.change_to_usersettings) #for settings button input\r\n        #self.search_button.clicked.connect(self.change_to_search_results) #for search button input\r\n        #self.free_search_button.clicked.connect(self.change_to_search_results)\r\n        #self.advanced_search_button.clicked.connect(self.change_to_search_results)\r\n\r\n        #------------------------------------Usersettings class------------------------------------\r\n\r\nclass Usersettings(QMainWindow):\r\n    def __init__(self):\r\n        super(Usersettings, self).__init__()\r\n        if UserType == 'Student':\r\n            loadUi(\"ui/usersettings_student.ui\", self) # file\r\n        else:\r\n            loadUi(\"ui/usersettings.ui\", self)\r\n        self.handle_buttons() \r\n\r\n    \r\n\r\n\r\n        #--------------help funcs for usersettings class-----------------\r\n\r\n    def change_to_login(self): # change to login screen\r\n        login = Login()\r\n        widget.addWidget(login)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def back_to_homepage(self): # back to previous screen\r\n        homepage = Homepage()\r\n        widget.addWidget(homepage)\r\n        widget.setCurrentIndex(widget.currentIndex()+1)\r\n\r\n    def handle_buttons(self): # this function handles the click of the signup button\r\n        self.sign_out_button.clicked.connect(self.change_to_login) #for sign out button input\r\n        self.back_button.clicked.connect(self.back_to_homepage) #for going back to previous screen\r\n\r\n\r\n\r\n\r\n\r\n\r\n#----------------------------------------Main----------------------------------\r\n\r\n\r\napp = QApplication(sys.argv)\r\nwidget = QtWidgets.QStackedWidget() # creates a Stack of widgets(windows)\r\n\r\nlogin = Login()\r\nwidget.addWidget(login) # adding the first window to the stack\r\nwidget.show() # showing the stack of widgets, first window will be showen first\r\n\r\ntry:\r\n    sys.exit(app.exec_()) # tring to run the app\r\nexcept:\r\n    print(\"Exiting\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision aa5248f2f0c095ce0d86af4af118538d29007df1)
+++ b/main.py	(date 1672484693768)
@@ -1,4 +1,3 @@
-
 from database.authentication import auth,db
 import sys
 import re
@@ -9,6 +8,9 @@
 UserType = 'Student' #temporay global variable for testing usersettings class
 #------------------------------------Signup class------------------------------------
 
+print("check if its work ")
+
+
 class Signup(QMainWindow):
     def __init__(self):
         super(Signup, self).__init__()
